'''
FileName: data_manager.py
Author: Chuncheng
Version: V0.0
Purpose: Read and provide CT Image Data
'''

# %%
import os
import numpy as np
import SimpleITK as sitk

from tqdm.auto import tqdm

from config import CONFIG, logger

# %%


class DCM_Manager(object):
    def __init__(self):
        data_folder = CONFIG.get('CT_raw_data_folder', None)

        if data_folder is None or not os.path.isdir(data_folder):
            msg = 'No data_folder specified or it is invalid, please check the config.py file.'
            logger.error(msg)
            raise ValueError(msg)

        self.data_folder = data_folder
        logger.info('DCM_Manager initialized with {}'.format(data_folder))

    def list_subject_folders(self):
        ''' Find the directory containing legal .dcm files '''
        data_folder = self.data_folder

        found = [e
                 for e in os.listdir(data_folder)
                 if os.path.isdir(os.path.join(data_folder, e))
                 if len(self.dcm_files(e)) > 1]

        logger.debug('Found {} subject folders in {}'.format(
            len(found), data_folder))
        return found

    def dcm_files(self, folder):
        ''' Return a list of the .dcm files in the folder '''
        data_folder = self.data_folder

        # files = [e
        #          for e in os.listdir(os.path.join(data_folder, folder))
        #          if e.endswith('.dcm')]

        files = sitk.ImageSeriesReader().GetGDCMSeriesFileNames(
            os.path.join(data_folder, folder))

        logger.debug('Found {} .dcm files in {}'.format(len(files),
                                                        os.path.join(data_folder, folder)))
        return files

    def get_image(self, folder):
        ''' Return the 3D img_array, generated by the .dcm files in the folder '''
        data_folder = self.data_folder

        dcm_files = sitk.ImageSeriesReader().GetGDCMSeriesFileNames(
            os.path.join(data_folder, folder))

        logger.debug('Found {} files, with extents of {}'.format(len(dcm_files),
                                                                 set([e.split('.')[-1] for e in dcm_files])))

        img_list = [sitk.GetArrayFromImage(sitk.ReadImage(e))
                    for e in tqdm(dcm_files, 'Reading .dcm files')]
        img_array = np.concatenate(img_list, axis=0)

        logger.debug(
            'Generate img_array with shape of {}'.format(img_array.shape))

        return img_array


# %%
# data_folder = CONFIG.get('CT_raw_data_folder',
#                          'CT_raw_data_folder is not provided')


# def list_subject_folders():
#     ''' Find the directory containing legal .dcm files '''
#     return [e
#             for e in os.listdir(data_folder)
#             if os.path.isdir(os.path.join(data_folder, e))
#             if len(dcm_files(e)) > 1]


# def dcm_files(folder):
#     ''' Return a list of the .dcm files in the folder '''
#     files = [e
#              for e in os.listdir(os.path.join(data_folder, folder))
#              if e.endswith('.dcm')]
#     print('Found {} .dcm files in {}'.format(len(files),
#                                              os.path.join(data_folder, folder)))
#     return files


# def get_image(folder):
#     ''' Return the 3D img_array, generated by the .dcm files in the folder '''
#     dcm_files = sitk.ImageSeriesReader().GetGDCMSeriesFileNames(
#         os.path.join(data_folder, folder))

#     print('Found {} files, with extents of {}'.format(len(dcm_files),
#                                                       set([e.split('.')[-1] for e in dcm_files])))

#     img_list = [sitk.GetArrayFromImage(sitk.ReadImage(e))
#                 for e in tqdm(dcm_files, 'Reading .dcm files')]
#     img_array = np.concatenate(img_list, axis=0)
#     print('Generate img_array with shape of {}'.format(img_array.shape))
#     return img_array


# # %%
